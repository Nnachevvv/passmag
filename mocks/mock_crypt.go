// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nnachevv/passmag/crypt (interfaces: Crypter)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCrypter is a mock of Crypter interface
type MockCrypter struct {
	ctrl     *gomock.Controller
	recorder *MockCrypterMockRecorder
}

// MockCrypterMockRecorder is the mock recorder for MockCrypter
type MockCrypterMockRecorder struct {
	mock *MockCrypter
}

// NewMockCrypter creates a new mock instance
func NewMockCrypter(ctrl *gomock.Controller) *MockCrypter {
	mock := &MockCrypter{ctrl: ctrl}
	mock.recorder = &MockCrypterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCrypter) EXPECT() *MockCrypterMockRecorder {
	return m.recorder
}

// Decrypt mocks base method
func (m *MockCrypter) Decrypt(arg0, arg1 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt
func (mr *MockCrypterMockRecorder) Decrypt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockCrypter)(nil).Decrypt), arg0, arg1)
}

// DecryptFile mocks base method
func (m *MockCrypter) DecryptFile(arg0 string, arg1 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecryptFile", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecryptFile indicates an expected call of DecryptFile
func (mr *MockCrypterMockRecorder) DecryptFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptFile", reflect.TypeOf((*MockCrypter)(nil).DecryptFile), arg0, arg1)
}

// EncryptFile mocks base method
func (m *MockCrypter) EncryptFile(arg0 string, arg1, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// EncryptFile indicates an expected call of EncryptFile
func (mr *MockCrypterMockRecorder) EncryptFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptFile", reflect.TypeOf((*MockCrypter)(nil).EncryptFile), arg0, arg1, arg2)
}
